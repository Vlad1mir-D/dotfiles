#!/bin/bash

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# if .bashrc executed from .bash_profile do not do the job twice
[[ ${#BASH_SOURCE[@]} == 3 && ${BASH_SOURCE[2]} =~ "bash_profile" && ${BASH_SOURCE[1]} =~ "bashrc" ]] && return

# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
shopt -s checkwinsize
# correct minor errors in the spelling of a directory component in a cd command
shopt -s cdspell
# save all lines of a multiple-line command in the same history entry (allows easy re-editing of multi-line commands)
shopt -s cmdhist
shopt -s no_empty_cmd_completion

# prevent Ctrl+S from sending SIGSTOP
stty -ixon
# this is for delete words by ^W
tty -s && stty werase ^- 2>/dev/null

if [[ $OSTYPE =~ "linux" || $OSTYPE =~ "cygwin" ]]; then
	alias ls="ls --color=auto"

	alias tracert="sudo traceroute -I"
	alias tracert6="sudo traceroute6 -I"
elif [[ $OSTYPE =~ "freebsd" || $OSTYPE =~ "darwin" ]]; then
	export CLICOLOR=1
	export LSCOLORS="ExGxFxdxCxDxDxhbadExEx"

	alias tracert="traceroute -I"
	alias tracert6="traceroute6 -I"
fi

alias ll='ls -liahs'
alias rmrf='rm -rf'
alias cls="clear"
alias 'cd-'='cd -'

alias sudo='sudo ' #to respect all aliases

type iptraf >/dev/null 2>&1
[[ $? -eq 0 ]] && alias iptraf="TERM=linux iptraf"
type iptraf-ng >/dev/null 2>&1
[[ $? -eq 0 ]] && alias iptraf-ng="TERM=linux iptraf-ng"
type vimx >/dev/null 2>&1
[[ $? -eq 0 && -n $DISPLAY ]] && alias vim="vimx"

# User specific environment and startup programs
PATH=$HOME/.local/bin:$HOME/bin:$PATH
export PATH

# don't put duplicate lines in the history
export HISTCONTROL=ignoreboth:erasedups
# set history length
HISTFILESIZE=1000000000
HISTSIZE=1000000
HISTTIMEFORMAT="%F %T: "

export EDITOR="vim"

function md(){ mkdir -p "$@" && cd "$@"; }
[[ $OSTYPE =~ "cygwin" ]] || ps(){ env ps "$@" -ww; }

function memempt(){
	[[ "$1" -eq 1 ]] && sync
	[[ "$1" -eq 2 ]] || echo 1 > /proc/sys/vm/compact_memory
	echo 1 > /proc/sys/vm/drop_caches
	[[ "$1" -eq 2 ]] || echo 1 > /proc/sys/vm/compact_memory
	echo 1 > /proc/sys/vm/drop_caches
}

function refresh_PS_ {
	local errcode=$?
	[ $errcode -ne 0 ] && errcode=" \e[37m[\e[31m$errcode\e[37m]" || errcode=""
	[[ -z $dlen_ ]] && dlen_=$(date +"%a, %d.%m.%y %T %z" | wc -m)
	if [[ -z $tty_ ]]; then
		tty_=$(tty)
		tty_="$$-${tty_/\/dev\//}"
	fi

	local ucolor="\e[32m"
	[[ "${USER}" == "root" ]] && ucolor="\e[31m"
	local hcolor="\e[32m"
	[[ -n $SSH_TTY && -z $is_local_ ]] && hcolor="\e[36m"
	local time="\e[$(($COLUMNS-$dlen_))G(\D{%a, %d.%m.%y %T %z})"
	local gitPs=""
	if [ "x$(type -t __git_ps1 2>/dev/null)" == "xfunction" ]; then
		gitPs="$(__git_ps1 " %s")"
	fi
	local mainPrompt="[${ucolor}\u${hcolor}@\h:\e[33m\w\e[0m$]${errcode}${gitPs} \e[37m|$tty_| \e[0m($(($SHLVL-1)):\#)$time"
	local flen=${#mainPrompt}
	local termTitle=""
	[[ ($TERM != "linux") && !($TERM =~ "cons") ]] && termTitle="\[\e]0;[\u@\h:\w] $\a"
	export PS1="${termTitle}\n${mainPrompt}\n# "
}

function prompt_command_ {
	refresh_PS_
	if [[ $OSTYPE != "cygwin" && 0 -ne 0 ]]; then
		# get cursor position and add new line if we're not in first column
		exec < /dev/tty
		local OLDSTTY=$(stty -g)
		stty raw -echo min 0
		echo -en "\033[6n" > /dev/tty && read -sdR CURPOS
		stty $OLDSTTY
		[[ ${CURPOS##*;} -gt 1 ]] && echo "${color_error}â†µ${color_error_off}"
	fi
	history -a; history -n
}
PROMPT_COMMAND=prompt_command_

if [ "$PS1" ]; then
	complete -cf sudo
fi

if [ -f ~/.bash_local ]; then
	. ~/.bash_local
fi

if [ -f /usr/share/git-core/contrib/completion/git-prompt.sh ]; then
	. /usr/share/git-core/contrib/completion/git-prompt.sh
	export GIT_PS1_SHOWDIRTYSTATE=1 GIT_PS1_SHOWSTASHSTATE=1 GIT_PS1_SHOWCOLORHINTS=1 GIT_PS1_SHOWUNTRACKEDFILES=1 GIT_PS1_DESCRIBE_STYLE="branch" GIT_PS1_SHOWUPSTREAM="verbose"
fi

bashrc_local_deploy_()
{
	if [[ -z $1 ]]; then
		echo "$FUNCNAME requires filename not to be null" 1>&2;
		return 1;
	fi;
	grep 'bashrc.local' "$1" > /dev/null 2>&1;
	[ $? -eq 0 ] && return 0;
	touch "$1";
	if [ $? -eq 0 ]; then
		local content="$(cat "$1" | grep -v bashrc.local)";
		echo "$content
[[ -e ~/.bashrc.local ]] && . ~/.bashrc.local
" > "$1";
	fi;
	return $?
}
bashrc_local_deploy_auto(){
	echo "Updating ~/.bashrc..."
	bashrc_local_deploy_ ~/.bashrc
	echo "Updating ~/.bash_profile..."
	bashrc_local_deploy_ ~/.bash_profile
}
